I"L	<p><strong>1、block中引用外部变量</strong></p>

<p>block中引用外部变量时，通常会把对象当做常量变量编码到block中，并且在block中尝试改变外部变量的值会报错，解决办法是引入<code class="language-plaintext highlighter-rouge">__block</code>标识符，需要在block内部修改的变量标识为<code class="language-plaintext highlighter-rouge">__block scope</code></p>

<p><strong>2、block自身的内存管理</strong></p>

<p>block本身是像对象一样可以retain，和release。但是，block在创建的时候，它的内存是分配在栈(stack)上，而不是在堆(heap)上。他本身的作于域是属于创建时候的作用域，一旦在创建时候的作用域外面调用block将导致程序崩溃。解决的方法就是在创建完block的时候需要调用copy的方法。copy会把block从栈上移动到堆上，那么就可以在其他地方使用这个block了:<code class="language-plaintext highlighter-rouge">_block = [_block copy];</code></p>

<p><strong>3、循环引用</strong></p>

<p>在block创建中：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_block = ^( ) { NSLog:(@“string %@“,_string ) }; 
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">_string</code>是成员变量
这里的<code class="language-plaintext highlighter-rouge">_string</code>相当于是<code class="language-plaintext highlighter-rouge">self-&gt;_string</code>；那么block是会对内部的对象进行一次retain。也就是说，self会被retain一次。当self释放的时候，需要block释放后才会对self进行释放，但是block的释放又需要等self的dealloc中才会释放。如此一来变形成了循环引用，导致内存泄露。修改方案是新建一个<code class="language-plaintext highlighter-rouge">__block scope</code>的局部变量，并把self赋值给它，而在block内部则使用这个局部变量来进行取值。因为<code class="language-plaintext highlighter-rouge">__block</code>标记的变量是不会被自动retain的。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>__block ViewController *controller = self;
_block = ^(){NSLog(@"string %@", controller-&gt;_string); };
</code></pre></div></div>
:ET