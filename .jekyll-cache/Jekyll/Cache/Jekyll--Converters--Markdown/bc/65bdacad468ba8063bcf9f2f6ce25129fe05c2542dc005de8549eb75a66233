I"a*<h2 id="什么是枚举">什么是枚举</h2>

<p>在程序设计语言中，一般用一个数值来代表某一状态，这种处理方法不直观，易读性差。如果能在程序中用自然语言中有相应含义的单词来代表某一状态，则程序就很容易阅读和理解。也就是说，事先考虑到某一变量可能取的值，尽量用自然语言中含义清楚的单词来表示它的每一个值，这种方法称为枚举方法，用这种方法定义的类型称枚举类型。</p>

<h2 id="枚举的命名">枚举的命名</h2>

<p>定义的枚举类型名称通常与项目的类文件前缀相同，或者是类库框架缩写,或者跟随具体业务名,如果开头是缩写要大写表示，跟随其后的命名应采用驼峰命名法则，命名应准确表述枚举表示的意义，枚举中各个值都应以定义的枚举类型开头，其后跟随各个枚举值对应的状态、选项或者状态码。</p>

<h2 id="状态与选项states--options">状态与选项（states &amp; options）</h2>

<h3 id="状态">状态</h3>
<p>同时只能有一种，如<code class="language-plaintext highlighter-rouge">JFStateError</code>,<code class="language-plaintext highlighter-rouge">JFStateUnknow</code>，不可能同时是<code class="language-plaintext highlighter-rouge">JFStateError</code>和<code class="language-plaintext highlighter-rouge">JFStateUnknow</code>。如下：</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typedef</span> <span class="kd">enum</span> <span class="kt">JFState</span> <span class="p">{</span>
    <span class="kt">JFStateOK</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="kt">JFStateError</span><span class="p">,</span>
    <span class="kt">JFStateUnknow</span>
<span class="p">}</span> <span class="kt">JFState</span><span class="p">;</span>
</code></pre></div></div>

<p>另外，我们经常在switch语句中使用枚举来表示各个状态，根据各个状态来进项判断。如下</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">JFState</span> <span class="n">state</span> <span class="o">=</span> <span class="kt">JFStateOK</span><span class="p">;</span>

    <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">case</span> <span class="kt">JFStateOK</span><span class="p">:</span>
        <span class="p">{</span>
        <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="kt">JFStateError</span><span class="p">:</span>
        <span class="p">{</span>
        <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="kt">JFStateUnknow</span><span class="p">:</span>
        <span class="p">{</span>
        <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这里大家总是习惯在switch语句中加上default分支，但是在使用枚举来定义状态的时候笔者不建议大家这么做。主要有以下几点：</p>

<blockquote>
  <ul>
    <li>使用枚举时，所需判断的几种状态是确认可控的，不需要在进行default的判断</li>
    <li>在之后的拓展中，如果加入了新的枚举类型，则编译器会发出警告提示开发者switch未处理所有枚举信息，提示新加入的枚举未在switch中进行处理，如果加上default分之的话就不会有该判断</li>
  </ul>
</blockquote>

<h3 id="选项">选项</h3>

<p>定义选项的时候。若这些选项可以彼此组合，则更应如此。只要枚举定义得对，各选项之间就可通过“按位或操作符”（bitwise OR operator）来组合。例如，iOS UI框架中有如下枚举类型，用来表示某个视图应该如何在水平或垂直方向上调整大小。</p>

<h4 id="位移枚举可复选的枚举-使用位移实现选项变量">位移枚举(可复选的枚举) 使用位移实现选项变量</h4>

<p>使用枚举定义选项,每个选项均可启用或禁用，使用上述方式来定义枚举值,每个枚举值所对应的二进制表示中，只有1个二进制位的值是1。用“按位或操作符”可组合多个选项。用 <code class="language-plaintext highlighter-rouge">|</code> 来隔开</p>

<p><strong><em>首先来补充下位运算的知识吧 ^_^</em></strong></p>

<ul>
  <li><strong>1、按位与”&amp;”</strong></li>
</ul>

<blockquote>
  <p>只有对应的两个二进位均为1时，结果位才为1，否则为0&gt;比如9&amp;5，其实就是1001&amp;0101=0001，因此9&amp;5=1&gt;二进制中，与1相&amp;就保持原位，与0相&amp;就为0</p>
</blockquote>

<ul>
  <li><strong>2、按位或”<code class="language-plaintext highlighter-rouge">|</code>“</strong></li>
</ul>

<blockquote>
  <p>只要对应的二个二进位有一个为1时，结果位就为1，否则为0。&gt;比如9<code class="language-plaintext highlighter-rouge">|</code>5，其实就是1001<code class="language-plaintext highlighter-rouge">|</code>0101=1101，因此9<code class="language-plaintext highlighter-rouge">|</code>5=13</p>
</blockquote>

<ul>
  <li><strong>3、左移«</strong></li>
</ul>

<blockquote>
  <p>把整数a的各二进位全部左移n位，高位丢弃，低位补0。左移n位其实就是乘以2的n次方。&gt;例如1«2 就是0001左移2为0100，因此1«2=4</p>
</blockquote>

<p><strong>枚举定义如下：</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">typedef</span> <span class="kt">NS_OPTIONS</span><span class="p">(</span><span class="kt">NSUInteger</span><span class="p">,</span> <span class="kt">ActionType</span><span class="p">)</span> <span class="p">{</span>

    <span class="kt">ActionTypeUp</span>    <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">//  0001  1</span>
    <span class="kt">ActionTypeDown</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//  0010  2</span>
    <span class="kt">ActionTypeRight</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span> <span class="c1">//  0100  4</span>
    <span class="kt">ActionTypeLeft</span>  <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">,</span> <span class="c1">//  1000  8</span>

<span class="p">};</span>
</code></pre></div></div>

<p><strong>枚举判断处理：</strong></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="nv">action</span><span class="p">:(</span><span class="kt">ActionType</span><span class="p">)</span><span class="n">type</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">&amp;</span> <span class="kt">ActionTypeUp</span><span class="p">)</span> <span class="o">==</span> <span class="kt">ActionTypeUp</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">NSLog</span><span class="p">(</span><span class="s">@"上"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">&amp;</span> <span class="kt">ActionTypeDown</span><span class="p">)</span> <span class="o">==</span> <span class="kt">ActionTypeDown</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">NSLog</span><span class="p">(</span><span class="s">@"下"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">&amp;</span> <span class="kt">ActionTypeLeft</span><span class="p">)</span> <span class="o">==</span> <span class="kt">ActionTypeLeft</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">NSLog</span><span class="p">(</span><span class="s">@"左"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">type</span> <span class="o">&amp;</span> <span class="kt">ActionTypeRight</span><span class="p">)</span> <span class="o">==</span> <span class="kt">ActionTypeRight</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">NSLog</span><span class="p">(</span><span class="s">@"右"</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>于是，调用的时候我们通常这么写</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">ActionType</span> <span class="n">type</span> <span class="o">=</span> <span class="kt">ActionTypeUp</span> <span class="o">|</span> <span class="kt">ActionTypeLeft</span> <span class="o">|</span> <span class="kt">ActionTypeRight</span> <span class="o">|</span> <span class="kt">ActionTypeDown</span><span class="p">;</span> <span class="c1">// 15</span>
<span class="p">[</span><span class="k">self</span> <span class="nv">action</span><span class="p">:</span><span class="n">type</span><span class="p">];</span>
</code></pre></div></div>

<ul>
  <li>定义这个<code class="language-plaintext highlighter-rouge">actionType</code>的选项为四个，这里按位异或，<code class="language-plaintext highlighter-rouge">0001|0010|0100|1000=1111</code>，得到结果这个type为15。</li>
  <li>调用方法<code class="language-plaintext highlighter-rouge">[self action:type]</code>，进行按位与操作：<code class="language-plaintext highlighter-rouge">type &amp; ActionTypeUp</code>，<code class="language-plaintext highlighter-rouge">1111&amp;0001=0001</code>，得到这个是否选择了该选项。然后便可以进行判断了。</li>
</ul>
:ET